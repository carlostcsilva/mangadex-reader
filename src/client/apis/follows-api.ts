/* tslint:disable */
/* eslint-disable */
/**
 * MangaDex API
 * MangaDex is an ad-free manga reader offering high-quality images!  This document details our API as it is right now. It is in no way a promise to never change it, although we will endeavour to publicly notify any major change.  # Acceptable use policy  Usage of our services implies acceptance of the following: - You **MUST** credit us - You **MUST** credit scanlation groups if you offer the ability to read chapters - You **CANNOT** run ads or paid services on your website and/or apps  These may change at any time for any and no reason and it is up to you check for updates from time to time.  # Security issues  If you believe you found a security issue in our API, please check our [security.txt](/security.txt) to get in touch privately. 
 *
 * OpenAPI spec version: 5.10.0
 * Contact: support@mangadex.org
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

import globalAxios, { AxiosResponse, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
import { CustomListList } from '../models';
import { MangaList } from '../models';
import { ReferenceExpansionManga } from '../models';
import { ReferenceExpansionScanlationGroup } from '../models';
import { Response } from '../models';
import { ScanlationGroupList } from '../models';
import { UserList } from '../models';
/**
 * FollowsApi - axios parameter creator
 * @export
 */
export const FollowsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Get logged User followed Groups
         * @param {number} [limit] 
         * @param {number} [offset] 
         * @param {ReferenceExpansionScanlationGroup} [includes] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserFollowsGroup: async (limit?: number, offset?: number, includes?: ReferenceExpansionScanlationGroup, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/user/follows/group`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (includes !== undefined) {
                localVarQueryParameter['includes[]'] = includes;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Check if logged User follows a Group
         * @param {string} id Scanlation Group id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserFollowsGroupId: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling getUserFollowsGroupId.');
            }
            const localVarPath = `/user/follows/group/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get logged User followed CustomList list
         * @param {number} [limit] 
         * @param {number} [offset] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserFollowsList: async (limit?: number, offset?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/user/follows/list`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Check if logged User follows a CustomList
         * @param {string} id CustomList id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserFollowsListId: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling getUserFollowsListId.');
            }
            const localVarPath = `/user/follows/list/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get logged User followed Manga list
         * @param {number} [limit] 
         * @param {number} [offset] 
         * @param {ReferenceExpansionManga} [includes] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserFollowsManga: async (limit?: number, offset?: number, includes?: ReferenceExpansionManga, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/user/follows/manga`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (includes !== undefined) {
                localVarQueryParameter['includes[]'] = includes;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Check if logged User follows a Manga
         * @param {string} id Manga id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserFollowsMangaId: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling getUserFollowsMangaId.');
            }
            const localVarPath = `/user/follows/manga/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get logged User followed User list
         * @param {number} [limit] 
         * @param {number} [offset] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserFollowsUser: async (limit?: number, offset?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/user/follows/user`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Check if logged User follows a User
         * @param {string} id User id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserFollowsUserId: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling getUserFollowsUserId.');
            }
            const localVarPath = `/user/follows/user/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * FollowsApi - functional programming interface
 * @export
 */
export const FollowsApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Get logged User followed Groups
         * @param {number} [limit] 
         * @param {number} [offset] 
         * @param {ReferenceExpansionScanlationGroup} [includes] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUserFollowsGroup(limit?: number, offset?: number, includes?: ReferenceExpansionScanlationGroup, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<ScanlationGroupList>>> {
            const localVarAxiosArgs = await FollowsApiAxiosParamCreator(configuration).getUserFollowsGroup(limit, offset, includes, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Check if logged User follows a Group
         * @param {string} id Scanlation Group id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUserFollowsGroupId(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Response>>> {
            const localVarAxiosArgs = await FollowsApiAxiosParamCreator(configuration).getUserFollowsGroupId(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Get logged User followed CustomList list
         * @param {number} [limit] 
         * @param {number} [offset] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUserFollowsList(limit?: number, offset?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<CustomListList>>> {
            const localVarAxiosArgs = await FollowsApiAxiosParamCreator(configuration).getUserFollowsList(limit, offset, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Check if logged User follows a CustomList
         * @param {string} id CustomList id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUserFollowsListId(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Response>>> {
            const localVarAxiosArgs = await FollowsApiAxiosParamCreator(configuration).getUserFollowsListId(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Get logged User followed Manga list
         * @param {number} [limit] 
         * @param {number} [offset] 
         * @param {ReferenceExpansionManga} [includes] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUserFollowsManga(limit?: number, offset?: number, includes?: ReferenceExpansionManga, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<MangaList>>> {
            const localVarAxiosArgs = await FollowsApiAxiosParamCreator(configuration).getUserFollowsManga(limit, offset, includes, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Check if logged User follows a Manga
         * @param {string} id Manga id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUserFollowsMangaId(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Response>>> {
            const localVarAxiosArgs = await FollowsApiAxiosParamCreator(configuration).getUserFollowsMangaId(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Get logged User followed User list
         * @param {number} [limit] 
         * @param {number} [offset] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUserFollowsUser(limit?: number, offset?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<UserList>>> {
            const localVarAxiosArgs = await FollowsApiAxiosParamCreator(configuration).getUserFollowsUser(limit, offset, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Check if logged User follows a User
         * @param {string} id User id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUserFollowsUserId(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Response>>> {
            const localVarAxiosArgs = await FollowsApiAxiosParamCreator(configuration).getUserFollowsUserId(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * FollowsApi - factory interface
 * @export
 */
export const FollowsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @summary Get logged User followed Groups
         * @param {number} [limit] 
         * @param {number} [offset] 
         * @param {ReferenceExpansionScanlationGroup} [includes] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUserFollowsGroup(limit?: number, offset?: number, includes?: ReferenceExpansionScanlationGroup, options?: AxiosRequestConfig): Promise<AxiosResponse<ScanlationGroupList>> {
            return FollowsApiFp(configuration).getUserFollowsGroup(limit, offset, includes, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Check if logged User follows a Group
         * @param {string} id Scanlation Group id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUserFollowsGroupId(id: string, options?: AxiosRequestConfig): Promise<AxiosResponse<Response>> {
            return FollowsApiFp(configuration).getUserFollowsGroupId(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get logged User followed CustomList list
         * @param {number} [limit] 
         * @param {number} [offset] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUserFollowsList(limit?: number, offset?: number, options?: AxiosRequestConfig): Promise<AxiosResponse<CustomListList>> {
            return FollowsApiFp(configuration).getUserFollowsList(limit, offset, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Check if logged User follows a CustomList
         * @param {string} id CustomList id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUserFollowsListId(id: string, options?: AxiosRequestConfig): Promise<AxiosResponse<Response>> {
            return FollowsApiFp(configuration).getUserFollowsListId(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get logged User followed Manga list
         * @param {number} [limit] 
         * @param {number} [offset] 
         * @param {ReferenceExpansionManga} [includes] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUserFollowsManga(limit?: number, offset?: number, includes?: ReferenceExpansionManga, options?: AxiosRequestConfig): Promise<AxiosResponse<MangaList>> {
            return FollowsApiFp(configuration).getUserFollowsManga(limit, offset, includes, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Check if logged User follows a Manga
         * @param {string} id Manga id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUserFollowsMangaId(id: string, options?: AxiosRequestConfig): Promise<AxiosResponse<Response>> {
            return FollowsApiFp(configuration).getUserFollowsMangaId(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get logged User followed User list
         * @param {number} [limit] 
         * @param {number} [offset] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUserFollowsUser(limit?: number, offset?: number, options?: AxiosRequestConfig): Promise<AxiosResponse<UserList>> {
            return FollowsApiFp(configuration).getUserFollowsUser(limit, offset, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Check if logged User follows a User
         * @param {string} id User id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUserFollowsUserId(id: string, options?: AxiosRequestConfig): Promise<AxiosResponse<Response>> {
            return FollowsApiFp(configuration).getUserFollowsUserId(id, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * FollowsApi - object-oriented interface
 * @export
 * @class FollowsApi
 * @extends {BaseAPI}
 */
export class FollowsApi extends BaseAPI {
    /**
     * 
     * @summary Get logged User followed Groups
     * @param {number} [limit] 
     * @param {number} [offset] 
     * @param {ReferenceExpansionScanlationGroup} [includes] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FollowsApi
     */
    public async getUserFollowsGroup(limit?: number, offset?: number, includes?: ReferenceExpansionScanlationGroup, options?: AxiosRequestConfig) : Promise<AxiosResponse<ScanlationGroupList>> {
        return FollowsApiFp(this.configuration).getUserFollowsGroup(limit, offset, includes, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary Check if logged User follows a Group
     * @param {string} id Scanlation Group id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FollowsApi
     */
    public async getUserFollowsGroupId(id: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<Response>> {
        return FollowsApiFp(this.configuration).getUserFollowsGroupId(id, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary Get logged User followed CustomList list
     * @param {number} [limit] 
     * @param {number} [offset] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FollowsApi
     */
    public async getUserFollowsList(limit?: number, offset?: number, options?: AxiosRequestConfig) : Promise<AxiosResponse<CustomListList>> {
        return FollowsApiFp(this.configuration).getUserFollowsList(limit, offset, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary Check if logged User follows a CustomList
     * @param {string} id CustomList id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FollowsApi
     */
    public async getUserFollowsListId(id: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<Response>> {
        return FollowsApiFp(this.configuration).getUserFollowsListId(id, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary Get logged User followed Manga list
     * @param {number} [limit] 
     * @param {number} [offset] 
     * @param {ReferenceExpansionManga} [includes] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FollowsApi
     */
    public async getUserFollowsManga(limit?: number, offset?: number, includes?: ReferenceExpansionManga, options?: AxiosRequestConfig) : Promise<AxiosResponse<MangaList>> {
        return FollowsApiFp(this.configuration).getUserFollowsManga(limit, offset, includes, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary Check if logged User follows a Manga
     * @param {string} id Manga id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FollowsApi
     */
    public async getUserFollowsMangaId(id: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<Response>> {
        return FollowsApiFp(this.configuration).getUserFollowsMangaId(id, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary Get logged User followed User list
     * @param {number} [limit] 
     * @param {number} [offset] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FollowsApi
     */
    public async getUserFollowsUser(limit?: number, offset?: number, options?: AxiosRequestConfig) : Promise<AxiosResponse<UserList>> {
        return FollowsApiFp(this.configuration).getUserFollowsUser(limit, offset, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary Check if logged User follows a User
     * @param {string} id User id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FollowsApi
     */
    public async getUserFollowsUserId(id: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<Response>> {
        return FollowsApiFp(this.configuration).getUserFollowsUserId(id, options).then((request) => request(this.axios, this.basePath));
    }
}
