/* tslint:disable */
/* eslint-disable */
/**
 * MangaDex API
 * MangaDex is an ad-free manga reader offering high-quality images!  This document details our API as it is right now. It is in no way a promise to never change it, although we will endeavour to publicly notify any major change.  # Acceptable use policy  Usage of our services implies acceptance of the following: - You **MUST** credit us - You **MUST** credit scanlation groups if you offer the ability to read chapters - You **CANNOT** run ads or paid services on your website and/or apps  These may change at any time for any and no reason and it is up to you check for updates from time to time.  # Security issues  If you believe you found a security issue in our API, please check our [security.txt](/security.txt) to get in touch privately. 
 *
 * OpenAPI spec version: 5.10.0
 * Contact: support@mangadex.org
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

import globalAxios, { AxiosResponse, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
import { ApiClientCreate } from '../models';
import { ApiClientEdit } from '../models';
import { ApiClientList } from '../models';
import { ApiClientResponse } from '../models';
import { ErrorResponse } from '../models';
import { InlineResponse2002 } from '../models';
import { InlineResponse2003 } from '../models';
import { ReferenceExpansionApiClient } from '../models';
/**
 * ApiClientApi - axios parameter creator
 * @export
 */
export const ApiClientApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Delete Api Client
         * @param {string} id ApiClient ID
         * @param {string} [version] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteApiclient: async (id: string, version?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling deleteApiclient.');
            }
            const localVarPath = `/client/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (version !== undefined) {
                localVarQueryParameter['version'] = version;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get Api Client by ID
         * @param {string} id ApiClient ID
         * @param {ReferenceExpansionApiClient} [includes] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApiclient: async (id: string, includes?: ReferenceExpansionApiClient, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling getApiclient.');
            }
            const localVarPath = `/client/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (includes !== undefined) {
                localVarQueryParameter['includes[]'] = includes;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get Secret for Client by ID
         * @param {string} id ApiClient ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApiclientSecret: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling getApiclientSecret.');
            }
            const localVarPath = `/client/{id}/secret`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary List own Api Clients
         * @param {number} [limit] 
         * @param {number} [offset] 
         * @param {string} [state] 
         * @param {string} [name] 
         * @param {ReferenceExpansionApiClient} [includes] 
         * @param {string} [orderName] 
         * @param {string} [orderCreatedAt] 
         * @param {string} [orderUpdatedAt] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getListApiclients: async (limit?: number, offset?: number, state?: string, name?: string, includes?: ReferenceExpansionApiClient, orderName?: string, orderCreatedAt?: string, orderUpdatedAt?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/client`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (state !== undefined) {
                localVarQueryParameter['state'] = state;
            }

            if (name !== undefined) {
                localVarQueryParameter['name'] = name;
            }

            if (includes !== undefined) {
                localVarQueryParameter['includes[]'] = includes;
            }

            if (orderName !== undefined) {
                localVarQueryParameter['order[name]'] = orderName;
            }

            if (orderCreatedAt !== undefined) {
                localVarQueryParameter['order[createdAt]'] = orderCreatedAt;
            }

            if (orderUpdatedAt !== undefined) {
                localVarQueryParameter['order[updatedAt]'] = orderUpdatedAt;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Create ApiClient
         * @param {string} contentType 
         * @param {ApiClientCreate} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postCreateApiclient: async (contentType: string, body?: ApiClientCreate, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'contentType' is not null or undefined
            if (contentType === null || contentType === undefined) {
                throw new RequiredError('contentType','Required parameter contentType was null or undefined when calling postCreateApiclient.');
            }
            const localVarPath = `/client`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (contentType !== undefined && contentType !== null) {
                localVarHeaderParameter['Content-Type'] = String(contentType);
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Edit ApiClient
         * @param {string} contentType 
         * @param {string} id ApiClient ID
         * @param {ApiClientEdit} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postEditApiclient: async (contentType: string, id: string, body?: ApiClientEdit, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'contentType' is not null or undefined
            if (contentType === null || contentType === undefined) {
                throw new RequiredError('contentType','Required parameter contentType was null or undefined when calling postEditApiclient.');
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling postEditApiclient.');
            }
            const localVarPath = `/client/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (contentType !== undefined && contentType !== null) {
                localVarHeaderParameter['Content-Type'] = String(contentType);
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Regenerate Client Secret
         * @param {string} contentType 
         * @param {string} id ApiClient ID
         * @param {any} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postRegenerateApiclientSecret: async (contentType: string, id: string, body?: any, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'contentType' is not null or undefined
            if (contentType === null || contentType === undefined) {
                throw new RequiredError('contentType','Required parameter contentType was null or undefined when calling postRegenerateApiclientSecret.');
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling postRegenerateApiclientSecret.');
            }
            const localVarPath = `/client/{id}/secret`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (contentType !== undefined && contentType !== null) {
                localVarHeaderParameter['Content-Type'] = String(contentType);
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ApiClientApi - functional programming interface
 * @export
 */
export const ApiClientApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Delete Api Client
         * @param {string} id ApiClient ID
         * @param {string} [version] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteApiclient(id: string, version?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<InlineResponse2002>>> {
            const localVarAxiosArgs = await ApiClientApiAxiosParamCreator(configuration).deleteApiclient(id, version, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Get Api Client by ID
         * @param {string} id ApiClient ID
         * @param {ReferenceExpansionApiClient} [includes] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getApiclient(id: string, includes?: ReferenceExpansionApiClient, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<ApiClientResponse>>> {
            const localVarAxiosArgs = await ApiClientApiAxiosParamCreator(configuration).getApiclient(id, includes, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Get Secret for Client by ID
         * @param {string} id ApiClient ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getApiclientSecret(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<InlineResponse2003>>> {
            const localVarAxiosArgs = await ApiClientApiAxiosParamCreator(configuration).getApiclientSecret(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary List own Api Clients
         * @param {number} [limit] 
         * @param {number} [offset] 
         * @param {string} [state] 
         * @param {string} [name] 
         * @param {ReferenceExpansionApiClient} [includes] 
         * @param {string} [orderName] 
         * @param {string} [orderCreatedAt] 
         * @param {string} [orderUpdatedAt] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getListApiclients(limit?: number, offset?: number, state?: string, name?: string, includes?: ReferenceExpansionApiClient, orderName?: string, orderCreatedAt?: string, orderUpdatedAt?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<ApiClientList>>> {
            const localVarAxiosArgs = await ApiClientApiAxiosParamCreator(configuration).getListApiclients(limit, offset, state, name, includes, orderName, orderCreatedAt, orderUpdatedAt, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Create ApiClient
         * @param {string} contentType 
         * @param {ApiClientCreate} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postCreateApiclient(contentType: string, body?: ApiClientCreate, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<ApiClientResponse>>> {
            const localVarAxiosArgs = await ApiClientApiAxiosParamCreator(configuration).postCreateApiclient(contentType, body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Edit ApiClient
         * @param {string} contentType 
         * @param {string} id ApiClient ID
         * @param {ApiClientEdit} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postEditApiclient(contentType: string, id: string, body?: ApiClientEdit, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<ApiClientResponse>>> {
            const localVarAxiosArgs = await ApiClientApiAxiosParamCreator(configuration).postEditApiclient(contentType, id, body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Regenerate Client Secret
         * @param {string} contentType 
         * @param {string} id ApiClient ID
         * @param {any} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postRegenerateApiclientSecret(contentType: string, id: string, body?: any, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<InlineResponse2003>>> {
            const localVarAxiosArgs = await ApiClientApiAxiosParamCreator(configuration).postRegenerateApiclientSecret(contentType, id, body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * ApiClientApi - factory interface
 * @export
 */
export const ApiClientApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @summary Delete Api Client
         * @param {string} id ApiClient ID
         * @param {string} [version] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteApiclient(id: string, version?: string, options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse2002>> {
            return ApiClientApiFp(configuration).deleteApiclient(id, version, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get Api Client by ID
         * @param {string} id ApiClient ID
         * @param {ReferenceExpansionApiClient} [includes] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getApiclient(id: string, includes?: ReferenceExpansionApiClient, options?: AxiosRequestConfig): Promise<AxiosResponse<ApiClientResponse>> {
            return ApiClientApiFp(configuration).getApiclient(id, includes, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get Secret for Client by ID
         * @param {string} id ApiClient ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getApiclientSecret(id: string, options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse2003>> {
            return ApiClientApiFp(configuration).getApiclientSecret(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary List own Api Clients
         * @param {number} [limit] 
         * @param {number} [offset] 
         * @param {string} [state] 
         * @param {string} [name] 
         * @param {ReferenceExpansionApiClient} [includes] 
         * @param {string} [orderName] 
         * @param {string} [orderCreatedAt] 
         * @param {string} [orderUpdatedAt] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getListApiclients(limit?: number, offset?: number, state?: string, name?: string, includes?: ReferenceExpansionApiClient, orderName?: string, orderCreatedAt?: string, orderUpdatedAt?: string, options?: AxiosRequestConfig): Promise<AxiosResponse<ApiClientList>> {
            return ApiClientApiFp(configuration).getListApiclients(limit, offset, state, name, includes, orderName, orderCreatedAt, orderUpdatedAt, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Create ApiClient
         * @param {string} contentType 
         * @param {ApiClientCreate} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postCreateApiclient(contentType: string, body?: ApiClientCreate, options?: AxiosRequestConfig): Promise<AxiosResponse<ApiClientResponse>> {
            return ApiClientApiFp(configuration).postCreateApiclient(contentType, body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Edit ApiClient
         * @param {string} contentType 
         * @param {string} id ApiClient ID
         * @param {ApiClientEdit} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postEditApiclient(contentType: string, id: string, body?: ApiClientEdit, options?: AxiosRequestConfig): Promise<AxiosResponse<ApiClientResponse>> {
            return ApiClientApiFp(configuration).postEditApiclient(contentType, id, body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Regenerate Client Secret
         * @param {string} contentType 
         * @param {string} id ApiClient ID
         * @param {any} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postRegenerateApiclientSecret(contentType: string, id: string, body?: any, options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse2003>> {
            return ApiClientApiFp(configuration).postRegenerateApiclientSecret(contentType, id, body, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ApiClientApi - object-oriented interface
 * @export
 * @class ApiClientApi
 * @extends {BaseAPI}
 */
export class ApiClientApi extends BaseAPI {
    /**
     * 
     * @summary Delete Api Client
     * @param {string} id ApiClient ID
     * @param {string} [version] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ApiClientApi
     */
    public async deleteApiclient(id: string, version?: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<InlineResponse2002>> {
        return ApiClientApiFp(this.configuration).deleteApiclient(id, version, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary Get Api Client by ID
     * @param {string} id ApiClient ID
     * @param {ReferenceExpansionApiClient} [includes] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ApiClientApi
     */
    public async getApiclient(id: string, includes?: ReferenceExpansionApiClient, options?: AxiosRequestConfig) : Promise<AxiosResponse<ApiClientResponse>> {
        return ApiClientApiFp(this.configuration).getApiclient(id, includes, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary Get Secret for Client by ID
     * @param {string} id ApiClient ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ApiClientApi
     */
    public async getApiclientSecret(id: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<InlineResponse2003>> {
        return ApiClientApiFp(this.configuration).getApiclientSecret(id, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary List own Api Clients
     * @param {number} [limit] 
     * @param {number} [offset] 
     * @param {string} [state] 
     * @param {string} [name] 
     * @param {ReferenceExpansionApiClient} [includes] 
     * @param {string} [orderName] 
     * @param {string} [orderCreatedAt] 
     * @param {string} [orderUpdatedAt] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ApiClientApi
     */
    public async getListApiclients(limit?: number, offset?: number, state?: string, name?: string, includes?: ReferenceExpansionApiClient, orderName?: string, orderCreatedAt?: string, orderUpdatedAt?: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<ApiClientList>> {
        return ApiClientApiFp(this.configuration).getListApiclients(limit, offset, state, name, includes, orderName, orderCreatedAt, orderUpdatedAt, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary Create ApiClient
     * @param {string} contentType 
     * @param {ApiClientCreate} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ApiClientApi
     */
    public async postCreateApiclient(contentType: string, body?: ApiClientCreate, options?: AxiosRequestConfig) : Promise<AxiosResponse<ApiClientResponse>> {
        return ApiClientApiFp(this.configuration).postCreateApiclient(contentType, body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary Edit ApiClient
     * @param {string} contentType 
     * @param {string} id ApiClient ID
     * @param {ApiClientEdit} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ApiClientApi
     */
    public async postEditApiclient(contentType: string, id: string, body?: ApiClientEdit, options?: AxiosRequestConfig) : Promise<AxiosResponse<ApiClientResponse>> {
        return ApiClientApiFp(this.configuration).postEditApiclient(contentType, id, body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary Regenerate Client Secret
     * @param {string} contentType 
     * @param {string} id ApiClient ID
     * @param {any} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ApiClientApi
     */
    public async postRegenerateApiclientSecret(contentType: string, id: string, body?: any, options?: AxiosRequestConfig) : Promise<AxiosResponse<InlineResponse2003>> {
        return ApiClientApiFp(this.configuration).postRegenerateApiclientSecret(contentType, id, body, options).then((request) => request(this.axios, this.basePath));
    }
}
