/* tslint:disable */
/* eslint-disable */
/**
 * MangaDex API
 * MangaDex is an ad-free manga reader offering high-quality images!  This document details our API as it is right now. It is in no way a promise to never change it, although we will endeavour to publicly notify any major change.  # Acceptable use policy  Usage of our services implies acceptance of the following: - You **MUST** credit us - You **MUST** credit scanlation groups if you offer the ability to read chapters - You **CANNOT** run ads or paid services on your website and/or apps  These may change at any time for any and no reason and it is up to you check for updates from time to time.  # Security issues  If you believe you found a security issue in our API, please check our [security.txt](/security.txt) to get in touch privately. 
 *
 * OpenAPI spec version: 5.10.0
 * Contact: support@mangadex.org
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

import globalAxios, { AxiosResponse, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
import { BeginEditSession } from '../models';
import { BeginUploadSession } from '../models';
import { Chapter } from '../models';
import { CommitUploadSession } from '../models';
import { ErrorResponse } from '../models';
import { InlineResponse20012 } from '../models';
import { Response } from '../models';
import { UploadSession } from '../models';
/**
 * UploadApi - axios parameter creator
 * @export
 */
export const UploadApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Abandon upload session
         * @param {string} uploadSessionId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        abandonUploadSession: async (uploadSessionId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'uploadSessionId' is not null or undefined
            if (uploadSessionId === null || uploadSessionId === undefined) {
                throw new RequiredError('uploadSessionId','Required parameter uploadSessionId was null or undefined when calling abandonUploadSession.');
            }
            const localVarPath = `/upload/{uploadSessionId}`
                .replace(`{${"uploadSessionId"}}`, encodeURIComponent(String(uploadSessionId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Start an edit chapter session
         * @param {string} contentType 
         * @param {string} chapterId 
         * @param {BeginEditSession} [body] The size of the body is limited to 1KB.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        beginEditSession: async (contentType: string, chapterId: string, body?: BeginEditSession, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'contentType' is not null or undefined
            if (contentType === null || contentType === undefined) {
                throw new RequiredError('contentType','Required parameter contentType was null or undefined when calling beginEditSession.');
            }
            // verify required parameter 'chapterId' is not null or undefined
            if (chapterId === null || chapterId === undefined) {
                throw new RequiredError('chapterId','Required parameter chapterId was null or undefined when calling beginEditSession.');
            }
            const localVarPath = `/upload/begin/{chapterId}`
                .replace(`{${"chapterId"}}`, encodeURIComponent(String(chapterId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (contentType !== undefined && contentType !== null) {
                localVarHeaderParameter['Content-Type'] = String(contentType);
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Start an upload session
         * @param {string} contentType 
         * @param {BeginUploadSession} [body] The size of the body is limited to 4KB.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        beginUploadSession: async (contentType: string, body?: BeginUploadSession, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'contentType' is not null or undefined
            if (contentType === null || contentType === undefined) {
                throw new RequiredError('contentType','Required parameter contentType was null or undefined when calling beginUploadSession.');
            }
            const localVarPath = `/upload/begin`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (contentType !== undefined && contentType !== null) {
                localVarHeaderParameter['Content-Type'] = String(contentType);
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Commit the upload session and specify chapter data
         * @param {string} contentType 
         * @param {string} uploadSessionId 
         * @param {CommitUploadSession} [body] The size of the body is limited to 4KB.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        commitUploadSession: async (contentType: string, uploadSessionId: string, body?: CommitUploadSession, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'contentType' is not null or undefined
            if (contentType === null || contentType === undefined) {
                throw new RequiredError('contentType','Required parameter contentType was null or undefined when calling commitUploadSession.');
            }
            // verify required parameter 'uploadSessionId' is not null or undefined
            if (uploadSessionId === null || uploadSessionId === undefined) {
                throw new RequiredError('uploadSessionId','Required parameter uploadSessionId was null or undefined when calling commitUploadSession.');
            }
            const localVarPath = `/upload/{uploadSessionId}/commit`
                .replace(`{${"uploadSessionId"}}`, encodeURIComponent(String(uploadSessionId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (contentType !== undefined && contentType !== null) {
                localVarHeaderParameter['Content-Type'] = String(contentType);
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete an uploaded image from the Upload Session
         * @param {string} uploadSessionId 
         * @param {string} uploadSessionFileId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteUploadedSessionFile: async (uploadSessionId: string, uploadSessionFileId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'uploadSessionId' is not null or undefined
            if (uploadSessionId === null || uploadSessionId === undefined) {
                throw new RequiredError('uploadSessionId','Required parameter uploadSessionId was null or undefined when calling deleteUploadedSessionFile.');
            }
            // verify required parameter 'uploadSessionFileId' is not null or undefined
            if (uploadSessionFileId === null || uploadSessionFileId === undefined) {
                throw new RequiredError('uploadSessionFileId','Required parameter uploadSessionFileId was null or undefined when calling deleteUploadedSessionFile.');
            }
            const localVarPath = `/upload/{uploadSessionId}/{uploadSessionFileId}`
                .replace(`{${"uploadSessionId"}}`, encodeURIComponent(String(uploadSessionId)))
                .replace(`{${"uploadSessionFileId"}}`, encodeURIComponent(String(uploadSessionFileId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete a set of uploaded images from the Upload Session
         * @param {string} uploadSessionId 
         * @param {string} contentType 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteUploadedSessionFiles: async (uploadSessionId: string, contentType: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'uploadSessionId' is not null or undefined
            if (uploadSessionId === null || uploadSessionId === undefined) {
                throw new RequiredError('uploadSessionId','Required parameter uploadSessionId was null or undefined when calling deleteUploadedSessionFiles.');
            }
            // verify required parameter 'contentType' is not null or undefined
            if (contentType === null || contentType === undefined) {
                throw new RequiredError('contentType','Required parameter contentType was null or undefined when calling deleteUploadedSessionFiles.');
            }
            const localVarPath = `/upload/{uploadSessionId}/batch`
                .replace(`{${"uploadSessionId"}}`, encodeURIComponent(String(uploadSessionId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (contentType !== undefined && contentType !== null) {
                localVarHeaderParameter['Content-Type'] = String(contentType);
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get the current User upload session
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUploadSession: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/upload`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Upload images to the upload session
         * @param {string} contentType 
         * @param {string} uploadSessionId 
         * @param {Blob} [file] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putUploadSessionFileForm: async (contentType: string, uploadSessionId: string, file?: Blob, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'contentType' is not null or undefined
            if (contentType === null || contentType === undefined) {
                throw new RequiredError('contentType','Required parameter contentType was null or undefined when calling putUploadSessionFileForm.');
            }
            // verify required parameter 'uploadSessionId' is not null or undefined
            if (uploadSessionId === null || uploadSessionId === undefined) {
                throw new RequiredError('uploadSessionId','Required parameter uploadSessionId was null or undefined when calling putUploadSessionFileForm.');
            }
            const localVarPath = `/upload/{uploadSessionId}`
                .replace(`{${"uploadSessionId"}}`, encodeURIComponent(String(uploadSessionId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new FormData();

            // authentication Bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (contentType !== undefined && contentType !== null) {
                localVarHeaderParameter['Content-Type'] = String(contentType);
            }


            if (file !== undefined) { 
                localVarFormParams.append('file', file as any);
            }

            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * UploadApi - functional programming interface
 * @export
 */
export const UploadApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Abandon upload session
         * @param {string} uploadSessionId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async abandonUploadSession(uploadSessionId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Response>>> {
            const localVarAxiosArgs = await UploadApiAxiosParamCreator(configuration).abandonUploadSession(uploadSessionId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Start an edit chapter session
         * @param {string} contentType 
         * @param {string} chapterId 
         * @param {BeginEditSession} [body] The size of the body is limited to 1KB.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async beginEditSession(contentType: string, chapterId: string, body?: BeginEditSession, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<UploadSession>>> {
            const localVarAxiosArgs = await UploadApiAxiosParamCreator(configuration).beginEditSession(contentType, chapterId, body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Start an upload session
         * @param {string} contentType 
         * @param {BeginUploadSession} [body] The size of the body is limited to 4KB.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async beginUploadSession(contentType: string, body?: BeginUploadSession, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<UploadSession>>> {
            const localVarAxiosArgs = await UploadApiAxiosParamCreator(configuration).beginUploadSession(contentType, body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Commit the upload session and specify chapter data
         * @param {string} contentType 
         * @param {string} uploadSessionId 
         * @param {CommitUploadSession} [body] The size of the body is limited to 4KB.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async commitUploadSession(contentType: string, uploadSessionId: string, body?: CommitUploadSession, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Chapter>>> {
            const localVarAxiosArgs = await UploadApiAxiosParamCreator(configuration).commitUploadSession(contentType, uploadSessionId, body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Delete an uploaded image from the Upload Session
         * @param {string} uploadSessionId 
         * @param {string} uploadSessionFileId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteUploadedSessionFile(uploadSessionId: string, uploadSessionFileId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Response>>> {
            const localVarAxiosArgs = await UploadApiAxiosParamCreator(configuration).deleteUploadedSessionFile(uploadSessionId, uploadSessionFileId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Delete a set of uploaded images from the Upload Session
         * @param {string} uploadSessionId 
         * @param {string} contentType 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteUploadedSessionFiles(uploadSessionId: string, contentType: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Response>>> {
            const localVarAxiosArgs = await UploadApiAxiosParamCreator(configuration).deleteUploadedSessionFiles(uploadSessionId, contentType, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Get the current User upload session
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUploadSession(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<UploadSession>>> {
            const localVarAxiosArgs = await UploadApiAxiosParamCreator(configuration).getUploadSession(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Upload images to the upload session
         * @param {string} contentType 
         * @param {string} uploadSessionId 
         * @param {Blob} [file] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async putUploadSessionFileForm(contentType: string, uploadSessionId: string, file?: Blob, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<InlineResponse20012>>> {
            const localVarAxiosArgs = await UploadApiAxiosParamCreator(configuration).putUploadSessionFileForm(contentType, uploadSessionId, file, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * UploadApi - factory interface
 * @export
 */
export const UploadApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @summary Abandon upload session
         * @param {string} uploadSessionId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async abandonUploadSession(uploadSessionId: string, options?: AxiosRequestConfig): Promise<AxiosResponse<Response>> {
            return UploadApiFp(configuration).abandonUploadSession(uploadSessionId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Start an edit chapter session
         * @param {string} contentType 
         * @param {string} chapterId 
         * @param {BeginEditSession} [body] The size of the body is limited to 1KB.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async beginEditSession(contentType: string, chapterId: string, body?: BeginEditSession, options?: AxiosRequestConfig): Promise<AxiosResponse<UploadSession>> {
            return UploadApiFp(configuration).beginEditSession(contentType, chapterId, body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Start an upload session
         * @param {string} contentType 
         * @param {BeginUploadSession} [body] The size of the body is limited to 4KB.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async beginUploadSession(contentType: string, body?: BeginUploadSession, options?: AxiosRequestConfig): Promise<AxiosResponse<UploadSession>> {
            return UploadApiFp(configuration).beginUploadSession(contentType, body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Commit the upload session and specify chapter data
         * @param {string} contentType 
         * @param {string} uploadSessionId 
         * @param {CommitUploadSession} [body] The size of the body is limited to 4KB.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async commitUploadSession(contentType: string, uploadSessionId: string, body?: CommitUploadSession, options?: AxiosRequestConfig): Promise<AxiosResponse<Chapter>> {
            return UploadApiFp(configuration).commitUploadSession(contentType, uploadSessionId, body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete an uploaded image from the Upload Session
         * @param {string} uploadSessionId 
         * @param {string} uploadSessionFileId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteUploadedSessionFile(uploadSessionId: string, uploadSessionFileId: string, options?: AxiosRequestConfig): Promise<AxiosResponse<Response>> {
            return UploadApiFp(configuration).deleteUploadedSessionFile(uploadSessionId, uploadSessionFileId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete a set of uploaded images from the Upload Session
         * @param {string} uploadSessionId 
         * @param {string} contentType 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteUploadedSessionFiles(uploadSessionId: string, contentType: string, options?: AxiosRequestConfig): Promise<AxiosResponse<Response>> {
            return UploadApiFp(configuration).deleteUploadedSessionFiles(uploadSessionId, contentType, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get the current User upload session
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUploadSession(options?: AxiosRequestConfig): Promise<AxiosResponse<UploadSession>> {
            return UploadApiFp(configuration).getUploadSession(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Upload images to the upload session
         * @param {string} contentType 
         * @param {string} uploadSessionId 
         * @param {Blob} [file] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async putUploadSessionFileForm(contentType: string, uploadSessionId: string, file?: Blob, options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse20012>> {
            return UploadApiFp(configuration).putUploadSessionFileForm(contentType, uploadSessionId, file, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * UploadApi - object-oriented interface
 * @export
 * @class UploadApi
 * @extends {BaseAPI}
 */
export class UploadApi extends BaseAPI {
    /**
     * 
     * @summary Abandon upload session
     * @param {string} uploadSessionId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UploadApi
     */
    public async abandonUploadSession(uploadSessionId: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<Response>> {
        return UploadApiFp(this.configuration).abandonUploadSession(uploadSessionId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary Start an edit chapter session
     * @param {string} contentType 
     * @param {string} chapterId 
     * @param {BeginEditSession} [body] The size of the body is limited to 1KB.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UploadApi
     */
    public async beginEditSession(contentType: string, chapterId: string, body?: BeginEditSession, options?: AxiosRequestConfig) : Promise<AxiosResponse<UploadSession>> {
        return UploadApiFp(this.configuration).beginEditSession(contentType, chapterId, body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary Start an upload session
     * @param {string} contentType 
     * @param {BeginUploadSession} [body] The size of the body is limited to 4KB.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UploadApi
     */
    public async beginUploadSession(contentType: string, body?: BeginUploadSession, options?: AxiosRequestConfig) : Promise<AxiosResponse<UploadSession>> {
        return UploadApiFp(this.configuration).beginUploadSession(contentType, body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary Commit the upload session and specify chapter data
     * @param {string} contentType 
     * @param {string} uploadSessionId 
     * @param {CommitUploadSession} [body] The size of the body is limited to 4KB.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UploadApi
     */
    public async commitUploadSession(contentType: string, uploadSessionId: string, body?: CommitUploadSession, options?: AxiosRequestConfig) : Promise<AxiosResponse<Chapter>> {
        return UploadApiFp(this.configuration).commitUploadSession(contentType, uploadSessionId, body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary Delete an uploaded image from the Upload Session
     * @param {string} uploadSessionId 
     * @param {string} uploadSessionFileId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UploadApi
     */
    public async deleteUploadedSessionFile(uploadSessionId: string, uploadSessionFileId: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<Response>> {
        return UploadApiFp(this.configuration).deleteUploadedSessionFile(uploadSessionId, uploadSessionFileId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary Delete a set of uploaded images from the Upload Session
     * @param {string} uploadSessionId 
     * @param {string} contentType 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UploadApi
     */
    public async deleteUploadedSessionFiles(uploadSessionId: string, contentType: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<Response>> {
        return UploadApiFp(this.configuration).deleteUploadedSessionFiles(uploadSessionId, contentType, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary Get the current User upload session
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UploadApi
     */
    public async getUploadSession(options?: AxiosRequestConfig) : Promise<AxiosResponse<UploadSession>> {
        return UploadApiFp(this.configuration).getUploadSession(options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary Upload images to the upload session
     * @param {string} contentType 
     * @param {string} uploadSessionId 
     * @param {Blob} [file] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UploadApi
     */
    public async putUploadSessionFileForm(contentType: string, uploadSessionId: string, file?: Blob, options?: AxiosRequestConfig) : Promise<AxiosResponse<InlineResponse20012>> {
        return UploadApiFp(this.configuration).putUploadSessionFileForm(contentType, uploadSessionId, file, options).then((request) => request(this.axios, this.basePath));
    }
}
