/* tslint:disable */
/* eslint-disable */
/**
 * MangaDex API
 * MangaDex is an ad-free manga reader offering high-quality images!  This document details our API as it is right now. It is in no way a promise to never change it, although we will endeavour to publicly notify any major change.  # Acceptable use policy  Usage of our services implies acceptance of the following: - You **MUST** credit us - You **MUST** credit scanlation groups if you offer the ability to read chapters - You **CANNOT** run ads or paid services on your website and/or apps  These may change at any time for any and no reason and it is up to you check for updates from time to time.  # Security issues  If you believe you found a security issue in our API, please check our [security.txt](/security.txt) to get in touch privately. 
 *
 * OpenAPI spec version: 5.10.0
 * Contact: support@mangadex.org
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

import globalAxios, { AxiosResponse, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
import { ChapterList } from '../models';
import { ErrorResponse } from '../models';
import { ReferenceExpansionChapter } from '../models';
/**
 * FeedApi - axios parameter creator
 * @export
 */
export const FeedApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary CustomList Manga feed
         * @param {string} id 
         * @param {number} [limit] 
         * @param {number} [offset] 
         * @param {Array<string>} [translatedLanguage] 
         * @param {Array<string>} [originalLanguage] 
         * @param {Array<string>} [excludedOriginalLanguage] 
         * @param {Array<string>} [contentRating] 
         * @param {Array<string>} [excludedGroups] 
         * @param {Array<string>} [excludedUploaders] 
         * @param {string} [includeFutureUpdates] 
         * @param {string} [createdAtSince] 
         * @param {string} [updatedAtSince] 
         * @param {string} [publishAtSince] 
         * @param {string} [orderCreatedAt] 
         * @param {string} [orderUpdatedAt] 
         * @param {string} [orderPublishAt] 
         * @param {string} [orderReadableAt] 
         * @param {string} [orderVolume] 
         * @param {string} [orderChapter] 
         * @param {ReferenceExpansionChapter} [includes] 
         * @param {number} [includeEmptyPages] 
         * @param {number} [includeFuturePublishAt] 
         * @param {number} [includeExternalUrl] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getListIdFeed: async (id: string, limit?: number, offset?: number, translatedLanguage?: Array<string>, originalLanguage?: Array<string>, excludedOriginalLanguage?: Array<string>, contentRating?: Array<string>, excludedGroups?: Array<string>, excludedUploaders?: Array<string>, includeFutureUpdates?: string, createdAtSince?: string, updatedAtSince?: string, publishAtSince?: string, orderCreatedAt?: string, orderUpdatedAt?: string, orderPublishAt?: string, orderReadableAt?: string, orderVolume?: string, orderChapter?: string, includes?: ReferenceExpansionChapter, includeEmptyPages?: number, includeFuturePublishAt?: number, includeExternalUrl?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling getListIdFeed.');
            }
            const localVarPath = `/list/{id}/feed`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (translatedLanguage) {
                localVarQueryParameter['translatedLanguage[]'] = translatedLanguage;
            }

            if (originalLanguage) {
                localVarQueryParameter['originalLanguage[]'] = originalLanguage;
            }

            if (excludedOriginalLanguage) {
                localVarQueryParameter['excludedOriginalLanguage[]'] = excludedOriginalLanguage;
            }

            if (contentRating) {
                localVarQueryParameter['contentRating[]'] = contentRating;
            }

            if (excludedGroups) {
                localVarQueryParameter['excludedGroups[]'] = excludedGroups;
            }

            if (excludedUploaders) {
                localVarQueryParameter['excludedUploaders[]'] = excludedUploaders;
            }

            if (includeFutureUpdates !== undefined) {
                localVarQueryParameter['includeFutureUpdates'] = includeFutureUpdates;
            }

            if (createdAtSince !== undefined) {
                localVarQueryParameter['createdAtSince'] = createdAtSince;
            }

            if (updatedAtSince !== undefined) {
                localVarQueryParameter['updatedAtSince'] = updatedAtSince;
            }

            if (publishAtSince !== undefined) {
                localVarQueryParameter['publishAtSince'] = publishAtSince;
            }

            if (orderCreatedAt !== undefined) {
                localVarQueryParameter['order[createdAt]'] = orderCreatedAt;
            }

            if (orderUpdatedAt !== undefined) {
                localVarQueryParameter['order[updatedAt]'] = orderUpdatedAt;
            }

            if (orderPublishAt !== undefined) {
                localVarQueryParameter['order[publishAt]'] = orderPublishAt;
            }

            if (orderReadableAt !== undefined) {
                localVarQueryParameter['order[readableAt]'] = orderReadableAt;
            }

            if (orderVolume !== undefined) {
                localVarQueryParameter['order[volume]'] = orderVolume;
            }

            if (orderChapter !== undefined) {
                localVarQueryParameter['order[chapter]'] = orderChapter;
            }

            if (includes !== undefined) {
                localVarQueryParameter['includes[]'] = includes;
            }

            if (includeEmptyPages !== undefined) {
                localVarQueryParameter['includeEmptyPages'] = includeEmptyPages;
            }

            if (includeFuturePublishAt !== undefined) {
                localVarQueryParameter['includeFuturePublishAt'] = includeFuturePublishAt;
            }

            if (includeExternalUrl !== undefined) {
                localVarQueryParameter['includeExternalUrl'] = includeExternalUrl;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get logged User followed Manga feed (Chapter list)
         * @param {number} [limit] 
         * @param {number} [offset] 
         * @param {Array<string>} [translatedLanguage] 
         * @param {Array<string>} [originalLanguage] 
         * @param {Array<string>} [excludedOriginalLanguage] 
         * @param {Array<string>} [contentRating] 
         * @param {Array<string>} [excludedGroups] 
         * @param {Array<string>} [excludedUploaders] 
         * @param {string} [includeFutureUpdates] 
         * @param {string} [createdAtSince] 
         * @param {string} [updatedAtSince] 
         * @param {string} [publishAtSince] 
         * @param {string} [orderCreatedAt] 
         * @param {string} [orderUpdatedAt] 
         * @param {string} [orderPublishAt] 
         * @param {string} [orderReadableAt] 
         * @param {string} [orderVolume] 
         * @param {string} [orderChapter] 
         * @param {ReferenceExpansionChapter} [includes] 
         * @param {number} [includeEmptyPages] 
         * @param {number} [includeFuturePublishAt] 
         * @param {number} [includeExternalUrl] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserFollowsMangaFeed: async (limit?: number, offset?: number, translatedLanguage?: Array<string>, originalLanguage?: Array<string>, excludedOriginalLanguage?: Array<string>, contentRating?: Array<string>, excludedGroups?: Array<string>, excludedUploaders?: Array<string>, includeFutureUpdates?: string, createdAtSince?: string, updatedAtSince?: string, publishAtSince?: string, orderCreatedAt?: string, orderUpdatedAt?: string, orderPublishAt?: string, orderReadableAt?: string, orderVolume?: string, orderChapter?: string, includes?: ReferenceExpansionChapter, includeEmptyPages?: number, includeFuturePublishAt?: number, includeExternalUrl?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/user/follows/manga/feed`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (translatedLanguage) {
                localVarQueryParameter['translatedLanguage[]'] = translatedLanguage;
            }

            if (originalLanguage) {
                localVarQueryParameter['originalLanguage[]'] = originalLanguage;
            }

            if (excludedOriginalLanguage) {
                localVarQueryParameter['excludedOriginalLanguage[]'] = excludedOriginalLanguage;
            }

            if (contentRating) {
                localVarQueryParameter['contentRating[]'] = contentRating;
            }

            if (excludedGroups) {
                localVarQueryParameter['excludedGroups[]'] = excludedGroups;
            }

            if (excludedUploaders) {
                localVarQueryParameter['excludedUploaders[]'] = excludedUploaders;
            }

            if (includeFutureUpdates !== undefined) {
                localVarQueryParameter['includeFutureUpdates'] = includeFutureUpdates;
            }

            if (createdAtSince !== undefined) {
                localVarQueryParameter['createdAtSince'] = createdAtSince;
            }

            if (updatedAtSince !== undefined) {
                localVarQueryParameter['updatedAtSince'] = updatedAtSince;
            }

            if (publishAtSince !== undefined) {
                localVarQueryParameter['publishAtSince'] = publishAtSince;
            }

            if (orderCreatedAt !== undefined) {
                localVarQueryParameter['order[createdAt]'] = orderCreatedAt;
            }

            if (orderUpdatedAt !== undefined) {
                localVarQueryParameter['order[updatedAt]'] = orderUpdatedAt;
            }

            if (orderPublishAt !== undefined) {
                localVarQueryParameter['order[publishAt]'] = orderPublishAt;
            }

            if (orderReadableAt !== undefined) {
                localVarQueryParameter['order[readableAt]'] = orderReadableAt;
            }

            if (orderVolume !== undefined) {
                localVarQueryParameter['order[volume]'] = orderVolume;
            }

            if (orderChapter !== undefined) {
                localVarQueryParameter['order[chapter]'] = orderChapter;
            }

            if (includes !== undefined) {
                localVarQueryParameter['includes[]'] = includes;
            }

            if (includeEmptyPages !== undefined) {
                localVarQueryParameter['includeEmptyPages'] = includeEmptyPages;
            }

            if (includeFuturePublishAt !== undefined) {
                localVarQueryParameter['includeFuturePublishAt'] = includeFuturePublishAt;
            }

            if (includeExternalUrl !== undefined) {
                localVarQueryParameter['includeExternalUrl'] = includeExternalUrl;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * FeedApi - functional programming interface
 * @export
 */
export const FeedApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary CustomList Manga feed
         * @param {string} id 
         * @param {number} [limit] 
         * @param {number} [offset] 
         * @param {Array<string>} [translatedLanguage] 
         * @param {Array<string>} [originalLanguage] 
         * @param {Array<string>} [excludedOriginalLanguage] 
         * @param {Array<string>} [contentRating] 
         * @param {Array<string>} [excludedGroups] 
         * @param {Array<string>} [excludedUploaders] 
         * @param {string} [includeFutureUpdates] 
         * @param {string} [createdAtSince] 
         * @param {string} [updatedAtSince] 
         * @param {string} [publishAtSince] 
         * @param {string} [orderCreatedAt] 
         * @param {string} [orderUpdatedAt] 
         * @param {string} [orderPublishAt] 
         * @param {string} [orderReadableAt] 
         * @param {string} [orderVolume] 
         * @param {string} [orderChapter] 
         * @param {ReferenceExpansionChapter} [includes] 
         * @param {number} [includeEmptyPages] 
         * @param {number} [includeFuturePublishAt] 
         * @param {number} [includeExternalUrl] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getListIdFeed(id: string, limit?: number, offset?: number, translatedLanguage?: Array<string>, originalLanguage?: Array<string>, excludedOriginalLanguage?: Array<string>, contentRating?: Array<string>, excludedGroups?: Array<string>, excludedUploaders?: Array<string>, includeFutureUpdates?: string, createdAtSince?: string, updatedAtSince?: string, publishAtSince?: string, orderCreatedAt?: string, orderUpdatedAt?: string, orderPublishAt?: string, orderReadableAt?: string, orderVolume?: string, orderChapter?: string, includes?: ReferenceExpansionChapter, includeEmptyPages?: number, includeFuturePublishAt?: number, includeExternalUrl?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<ChapterList>>> {
            const localVarAxiosArgs = await FeedApiAxiosParamCreator(configuration).getListIdFeed(id, limit, offset, translatedLanguage, originalLanguage, excludedOriginalLanguage, contentRating, excludedGroups, excludedUploaders, includeFutureUpdates, createdAtSince, updatedAtSince, publishAtSince, orderCreatedAt, orderUpdatedAt, orderPublishAt, orderReadableAt, orderVolume, orderChapter, includes, includeEmptyPages, includeFuturePublishAt, includeExternalUrl, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Get logged User followed Manga feed (Chapter list)
         * @param {number} [limit] 
         * @param {number} [offset] 
         * @param {Array<string>} [translatedLanguage] 
         * @param {Array<string>} [originalLanguage] 
         * @param {Array<string>} [excludedOriginalLanguage] 
         * @param {Array<string>} [contentRating] 
         * @param {Array<string>} [excludedGroups] 
         * @param {Array<string>} [excludedUploaders] 
         * @param {string} [includeFutureUpdates] 
         * @param {string} [createdAtSince] 
         * @param {string} [updatedAtSince] 
         * @param {string} [publishAtSince] 
         * @param {string} [orderCreatedAt] 
         * @param {string} [orderUpdatedAt] 
         * @param {string} [orderPublishAt] 
         * @param {string} [orderReadableAt] 
         * @param {string} [orderVolume] 
         * @param {string} [orderChapter] 
         * @param {ReferenceExpansionChapter} [includes] 
         * @param {number} [includeEmptyPages] 
         * @param {number} [includeFuturePublishAt] 
         * @param {number} [includeExternalUrl] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUserFollowsMangaFeed(limit?: number, offset?: number, translatedLanguage?: Array<string>, originalLanguage?: Array<string>, excludedOriginalLanguage?: Array<string>, contentRating?: Array<string>, excludedGroups?: Array<string>, excludedUploaders?: Array<string>, includeFutureUpdates?: string, createdAtSince?: string, updatedAtSince?: string, publishAtSince?: string, orderCreatedAt?: string, orderUpdatedAt?: string, orderPublishAt?: string, orderReadableAt?: string, orderVolume?: string, orderChapter?: string, includes?: ReferenceExpansionChapter, includeEmptyPages?: number, includeFuturePublishAt?: number, includeExternalUrl?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<ChapterList>>> {
            const localVarAxiosArgs = await FeedApiAxiosParamCreator(configuration).getUserFollowsMangaFeed(limit, offset, translatedLanguage, originalLanguage, excludedOriginalLanguage, contentRating, excludedGroups, excludedUploaders, includeFutureUpdates, createdAtSince, updatedAtSince, publishAtSince, orderCreatedAt, orderUpdatedAt, orderPublishAt, orderReadableAt, orderVolume, orderChapter, includes, includeEmptyPages, includeFuturePublishAt, includeExternalUrl, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * FeedApi - factory interface
 * @export
 */
export const FeedApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @summary CustomList Manga feed
         * @param {string} id 
         * @param {number} [limit] 
         * @param {number} [offset] 
         * @param {Array<string>} [translatedLanguage] 
         * @param {Array<string>} [originalLanguage] 
         * @param {Array<string>} [excludedOriginalLanguage] 
         * @param {Array<string>} [contentRating] 
         * @param {Array<string>} [excludedGroups] 
         * @param {Array<string>} [excludedUploaders] 
         * @param {string} [includeFutureUpdates] 
         * @param {string} [createdAtSince] 
         * @param {string} [updatedAtSince] 
         * @param {string} [publishAtSince] 
         * @param {string} [orderCreatedAt] 
         * @param {string} [orderUpdatedAt] 
         * @param {string} [orderPublishAt] 
         * @param {string} [orderReadableAt] 
         * @param {string} [orderVolume] 
         * @param {string} [orderChapter] 
         * @param {ReferenceExpansionChapter} [includes] 
         * @param {number} [includeEmptyPages] 
         * @param {number} [includeFuturePublishAt] 
         * @param {number} [includeExternalUrl] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getListIdFeed(id: string, limit?: number, offset?: number, translatedLanguage?: Array<string>, originalLanguage?: Array<string>, excludedOriginalLanguage?: Array<string>, contentRating?: Array<string>, excludedGroups?: Array<string>, excludedUploaders?: Array<string>, includeFutureUpdates?: string, createdAtSince?: string, updatedAtSince?: string, publishAtSince?: string, orderCreatedAt?: string, orderUpdatedAt?: string, orderPublishAt?: string, orderReadableAt?: string, orderVolume?: string, orderChapter?: string, includes?: ReferenceExpansionChapter, includeEmptyPages?: number, includeFuturePublishAt?: number, includeExternalUrl?: number, options?: AxiosRequestConfig): Promise<AxiosResponse<ChapterList>> {
            return FeedApiFp(configuration).getListIdFeed(id, limit, offset, translatedLanguage, originalLanguage, excludedOriginalLanguage, contentRating, excludedGroups, excludedUploaders, includeFutureUpdates, createdAtSince, updatedAtSince, publishAtSince, orderCreatedAt, orderUpdatedAt, orderPublishAt, orderReadableAt, orderVolume, orderChapter, includes, includeEmptyPages, includeFuturePublishAt, includeExternalUrl, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get logged User followed Manga feed (Chapter list)
         * @param {number} [limit] 
         * @param {number} [offset] 
         * @param {Array<string>} [translatedLanguage] 
         * @param {Array<string>} [originalLanguage] 
         * @param {Array<string>} [excludedOriginalLanguage] 
         * @param {Array<string>} [contentRating] 
         * @param {Array<string>} [excludedGroups] 
         * @param {Array<string>} [excludedUploaders] 
         * @param {string} [includeFutureUpdates] 
         * @param {string} [createdAtSince] 
         * @param {string} [updatedAtSince] 
         * @param {string} [publishAtSince] 
         * @param {string} [orderCreatedAt] 
         * @param {string} [orderUpdatedAt] 
         * @param {string} [orderPublishAt] 
         * @param {string} [orderReadableAt] 
         * @param {string} [orderVolume] 
         * @param {string} [orderChapter] 
         * @param {ReferenceExpansionChapter} [includes] 
         * @param {number} [includeEmptyPages] 
         * @param {number} [includeFuturePublishAt] 
         * @param {number} [includeExternalUrl] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUserFollowsMangaFeed(limit?: number, offset?: number, translatedLanguage?: Array<string>, originalLanguage?: Array<string>, excludedOriginalLanguage?: Array<string>, contentRating?: Array<string>, excludedGroups?: Array<string>, excludedUploaders?: Array<string>, includeFutureUpdates?: string, createdAtSince?: string, updatedAtSince?: string, publishAtSince?: string, orderCreatedAt?: string, orderUpdatedAt?: string, orderPublishAt?: string, orderReadableAt?: string, orderVolume?: string, orderChapter?: string, includes?: ReferenceExpansionChapter, includeEmptyPages?: number, includeFuturePublishAt?: number, includeExternalUrl?: number, options?: AxiosRequestConfig): Promise<AxiosResponse<ChapterList>> {
            return FeedApiFp(configuration).getUserFollowsMangaFeed(limit, offset, translatedLanguage, originalLanguage, excludedOriginalLanguage, contentRating, excludedGroups, excludedUploaders, includeFutureUpdates, createdAtSince, updatedAtSince, publishAtSince, orderCreatedAt, orderUpdatedAt, orderPublishAt, orderReadableAt, orderVolume, orderChapter, includes, includeEmptyPages, includeFuturePublishAt, includeExternalUrl, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * FeedApi - object-oriented interface
 * @export
 * @class FeedApi
 * @extends {BaseAPI}
 */
export class FeedApi extends BaseAPI {
    /**
     * 
     * @summary CustomList Manga feed
     * @param {string} id 
     * @param {number} [limit] 
     * @param {number} [offset] 
     * @param {Array<string>} [translatedLanguage] 
     * @param {Array<string>} [originalLanguage] 
     * @param {Array<string>} [excludedOriginalLanguage] 
     * @param {Array<string>} [contentRating] 
     * @param {Array<string>} [excludedGroups] 
     * @param {Array<string>} [excludedUploaders] 
     * @param {string} [includeFutureUpdates] 
     * @param {string} [createdAtSince] 
     * @param {string} [updatedAtSince] 
     * @param {string} [publishAtSince] 
     * @param {string} [orderCreatedAt] 
     * @param {string} [orderUpdatedAt] 
     * @param {string} [orderPublishAt] 
     * @param {string} [orderReadableAt] 
     * @param {string} [orderVolume] 
     * @param {string} [orderChapter] 
     * @param {ReferenceExpansionChapter} [includes] 
     * @param {number} [includeEmptyPages] 
     * @param {number} [includeFuturePublishAt] 
     * @param {number} [includeExternalUrl] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FeedApi
     */
    public async getListIdFeed(id: string, limit?: number, offset?: number, translatedLanguage?: Array<string>, originalLanguage?: Array<string>, excludedOriginalLanguage?: Array<string>, contentRating?: Array<string>, excludedGroups?: Array<string>, excludedUploaders?: Array<string>, includeFutureUpdates?: string, createdAtSince?: string, updatedAtSince?: string, publishAtSince?: string, orderCreatedAt?: string, orderUpdatedAt?: string, orderPublishAt?: string, orderReadableAt?: string, orderVolume?: string, orderChapter?: string, includes?: ReferenceExpansionChapter, includeEmptyPages?: number, includeFuturePublishAt?: number, includeExternalUrl?: number, options?: AxiosRequestConfig) : Promise<AxiosResponse<ChapterList>> {
        return FeedApiFp(this.configuration).getListIdFeed(id, limit, offset, translatedLanguage, originalLanguage, excludedOriginalLanguage, contentRating, excludedGroups, excludedUploaders, includeFutureUpdates, createdAtSince, updatedAtSince, publishAtSince, orderCreatedAt, orderUpdatedAt, orderPublishAt, orderReadableAt, orderVolume, orderChapter, includes, includeEmptyPages, includeFuturePublishAt, includeExternalUrl, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary Get logged User followed Manga feed (Chapter list)
     * @param {number} [limit] 
     * @param {number} [offset] 
     * @param {Array<string>} [translatedLanguage] 
     * @param {Array<string>} [originalLanguage] 
     * @param {Array<string>} [excludedOriginalLanguage] 
     * @param {Array<string>} [contentRating] 
     * @param {Array<string>} [excludedGroups] 
     * @param {Array<string>} [excludedUploaders] 
     * @param {string} [includeFutureUpdates] 
     * @param {string} [createdAtSince] 
     * @param {string} [updatedAtSince] 
     * @param {string} [publishAtSince] 
     * @param {string} [orderCreatedAt] 
     * @param {string} [orderUpdatedAt] 
     * @param {string} [orderPublishAt] 
     * @param {string} [orderReadableAt] 
     * @param {string} [orderVolume] 
     * @param {string} [orderChapter] 
     * @param {ReferenceExpansionChapter} [includes] 
     * @param {number} [includeEmptyPages] 
     * @param {number} [includeFuturePublishAt] 
     * @param {number} [includeExternalUrl] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FeedApi
     */
    public async getUserFollowsMangaFeed(limit?: number, offset?: number, translatedLanguage?: Array<string>, originalLanguage?: Array<string>, excludedOriginalLanguage?: Array<string>, contentRating?: Array<string>, excludedGroups?: Array<string>, excludedUploaders?: Array<string>, includeFutureUpdates?: string, createdAtSince?: string, updatedAtSince?: string, publishAtSince?: string, orderCreatedAt?: string, orderUpdatedAt?: string, orderPublishAt?: string, orderReadableAt?: string, orderVolume?: string, orderChapter?: string, includes?: ReferenceExpansionChapter, includeEmptyPages?: number, includeFuturePublishAt?: number, includeExternalUrl?: number, options?: AxiosRequestConfig) : Promise<AxiosResponse<ChapterList>> {
        return FeedApiFp(this.configuration).getUserFollowsMangaFeed(limit, offset, translatedLanguage, originalLanguage, excludedOriginalLanguage, contentRating, excludedGroups, excludedUploaders, includeFutureUpdates, createdAtSince, updatedAtSince, publishAtSince, orderCreatedAt, orderUpdatedAt, orderPublishAt, orderReadableAt, orderVolume, orderChapter, includes, includeEmptyPages, includeFuturePublishAt, includeExternalUrl, options).then((request) => request(this.axios, this.basePath));
    }
}
