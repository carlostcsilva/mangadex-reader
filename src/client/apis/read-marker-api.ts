/* tslint:disable */
/* eslint-disable */
/**
 * MangaDex API
 * MangaDex is an ad-free manga reader offering high-quality images!  This document details our API as it is right now. It is in no way a promise to never change it, although we will endeavour to publicly notify any major change.  # Acceptable use policy  Usage of our services implies acceptance of the following: - You **MUST** credit us - You **MUST** credit scanlation groups if you offer the ability to read chapters - You **CANNOT** run ads or paid services on your website and/or apps  These may change at any time for any and no reason and it is up to you check for updates from time to time.  # Security issues  If you believe you found a security issue in our API, please check our [security.txt](/security.txt) to get in touch privately. 
 *
 * OpenAPI spec version: 5.10.0
 * Contact: support@mangadex.org
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

import globalAxios, { AxiosResponse, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
import { ChapterReadMarkerBatch } from '../models';
import { ErrorResponse } from '../models';
import { InlineResponse20019 } from '../models';
import { InlineResponse2004 } from '../models';
import { InlineResponse2005 } from '../models';
import { InlineResponse2006 } from '../models';
/**
 * ReadMarkerApi - axios parameter creator
 * @export
 */
export const ReadMarkerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * A list of chapter ids that are marked as read for the specified manga
         * @summary Manga read markers
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMangaChapterReadmarkers: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling getMangaChapterReadmarkers.');
            }
            const localVarPath = `/manga/{id}/read`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * A list of chapter ids that are marked as read for the given manga ids
         * @summary Manga read markers
         * @param {Array<string>} ids Manga ids
         * @param {boolean} [grouped] Group results by manga ids
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMangaChapterReadmarkers2: async (ids: Array<string>, grouped?: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'ids' is not null or undefined
            if (ids === null || ids === undefined) {
                throw new RequiredError('ids','Required parameter ids was null or undefined when calling getMangaChapterReadmarkers2.');
            }
            const localVarPath = `/manga/read`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (ids) {
                localVarQueryParameter['ids[]'] = ids;
            }

            if (grouped !== undefined) {
                localVarQueryParameter['grouped'] = grouped;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get users reading history
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getReadingHistory: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/user/history`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Send a lot of chapter ids for one manga to mark as read and/or unread
         * @summary Manga read markers batch
         * @param {string} id 
         * @param {ChapterReadMarkerBatch} [body] The size of the body is limited to 10KB.
         * @param {boolean} [updateHistory] Adding this will cause the chapter to be stored in the user&#x27;s reading history
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postMangaChapterReadmarkers: async (id: string, body?: ChapterReadMarkerBatch, updateHistory?: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling postMangaChapterReadmarkers.');
            }
            const localVarPath = `/manga/{id}/read`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (updateHistory !== undefined) {
                localVarQueryParameter['updateHistory'] = updateHistory;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ReadMarkerApi - functional programming interface
 * @export
 */
export const ReadMarkerApiFp = function(configuration?: Configuration) {
    return {
        /**
         * A list of chapter ids that are marked as read for the specified manga
         * @summary Manga read markers
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getMangaChapterReadmarkers(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<InlineResponse2005>>> {
            const localVarAxiosArgs = await ReadMarkerApiAxiosParamCreator(configuration).getMangaChapterReadmarkers(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * A list of chapter ids that are marked as read for the given manga ids
         * @summary Manga read markers
         * @param {Array<string>} ids Manga ids
         * @param {boolean} [grouped] Group results by manga ids
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getMangaChapterReadmarkers2(ids: Array<string>, grouped?: boolean, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<InlineResponse2006>>> {
            const localVarAxiosArgs = await ReadMarkerApiAxiosParamCreator(configuration).getMangaChapterReadmarkers2(ids, grouped, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Get users reading history
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getReadingHistory(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<InlineResponse20019>>> {
            const localVarAxiosArgs = await ReadMarkerApiAxiosParamCreator(configuration).getReadingHistory(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Send a lot of chapter ids for one manga to mark as read and/or unread
         * @summary Manga read markers batch
         * @param {string} id 
         * @param {ChapterReadMarkerBatch} [body] The size of the body is limited to 10KB.
         * @param {boolean} [updateHistory] Adding this will cause the chapter to be stored in the user&#x27;s reading history
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postMangaChapterReadmarkers(id: string, body?: ChapterReadMarkerBatch, updateHistory?: boolean, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<InlineResponse2004>>> {
            const localVarAxiosArgs = await ReadMarkerApiAxiosParamCreator(configuration).postMangaChapterReadmarkers(id, body, updateHistory, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * ReadMarkerApi - factory interface
 * @export
 */
export const ReadMarkerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * A list of chapter ids that are marked as read for the specified manga
         * @summary Manga read markers
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getMangaChapterReadmarkers(id: string, options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse2005>> {
            return ReadMarkerApiFp(configuration).getMangaChapterReadmarkers(id, options).then((request) => request(axios, basePath));
        },
        /**
         * A list of chapter ids that are marked as read for the given manga ids
         * @summary Manga read markers
         * @param {Array<string>} ids Manga ids
         * @param {boolean} [grouped] Group results by manga ids
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getMangaChapterReadmarkers2(ids: Array<string>, grouped?: boolean, options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse2006>> {
            return ReadMarkerApiFp(configuration).getMangaChapterReadmarkers2(ids, grouped, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get users reading history
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getReadingHistory(options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse20019>> {
            return ReadMarkerApiFp(configuration).getReadingHistory(options).then((request) => request(axios, basePath));
        },
        /**
         * Send a lot of chapter ids for one manga to mark as read and/or unread
         * @summary Manga read markers batch
         * @param {string} id 
         * @param {ChapterReadMarkerBatch} [body] The size of the body is limited to 10KB.
         * @param {boolean} [updateHistory] Adding this will cause the chapter to be stored in the user&#x27;s reading history
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postMangaChapterReadmarkers(id: string, body?: ChapterReadMarkerBatch, updateHistory?: boolean, options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse2004>> {
            return ReadMarkerApiFp(configuration).postMangaChapterReadmarkers(id, body, updateHistory, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ReadMarkerApi - object-oriented interface
 * @export
 * @class ReadMarkerApi
 * @extends {BaseAPI}
 */
export class ReadMarkerApi extends BaseAPI {
    /**
     * A list of chapter ids that are marked as read for the specified manga
     * @summary Manga read markers
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReadMarkerApi
     */
    public async getMangaChapterReadmarkers(id: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<InlineResponse2005>> {
        return ReadMarkerApiFp(this.configuration).getMangaChapterReadmarkers(id, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * A list of chapter ids that are marked as read for the given manga ids
     * @summary Manga read markers
     * @param {Array<string>} ids Manga ids
     * @param {boolean} [grouped] Group results by manga ids
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReadMarkerApi
     */
    public async getMangaChapterReadmarkers2(ids: Array<string>, grouped?: boolean, options?: AxiosRequestConfig) : Promise<AxiosResponse<InlineResponse2006>> {
        return ReadMarkerApiFp(this.configuration).getMangaChapterReadmarkers2(ids, grouped, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary Get users reading history
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReadMarkerApi
     */
    public async getReadingHistory(options?: AxiosRequestConfig) : Promise<AxiosResponse<InlineResponse20019>> {
        return ReadMarkerApiFp(this.configuration).getReadingHistory(options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Send a lot of chapter ids for one manga to mark as read and/or unread
     * @summary Manga read markers batch
     * @param {string} id 
     * @param {ChapterReadMarkerBatch} [body] The size of the body is limited to 10KB.
     * @param {boolean} [updateHistory] Adding this will cause the chapter to be stored in the user&#x27;s reading history
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReadMarkerApi
     */
    public async postMangaChapterReadmarkers(id: string, body?: ChapterReadMarkerBatch, updateHistory?: boolean, options?: AxiosRequestConfig) : Promise<AxiosResponse<InlineResponse2004>> {
        return ReadMarkerApiFp(this.configuration).postMangaChapterReadmarkers(id, body, updateHistory, options).then((request) => request(this.axios, this.basePath));
    }
}
