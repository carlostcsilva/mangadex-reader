/* tslint:disable */
/* eslint-disable */
/**
 * MangaDex API
 * MangaDex is an ad-free manga reader offering high-quality images!  This document details our API as it is right now. It is in no way a promise to never change it, although we will endeavour to publicly notify any major change.  # Acceptable use policy  Usage of our services implies acceptance of the following: - You **MUST** credit us - You **MUST** credit scanlation groups if you offer the ability to read chapters - You **CANNOT** run ads or paid services on your website and/or apps  These may change at any time for any and no reason and it is up to you check for updates from time to time.  # Security issues  If you believe you found a security issue in our API, please check our [security.txt](/security.txt) to get in touch privately. 
 *
 * OpenAPI spec version: 5.10.0
 * Contact: support@mangadex.org
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

import globalAxios, { AxiosResponse, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
import { AccountActivateResponse } from '../models';
import { CreateAccount } from '../models';
import { ErrorResponse } from '../models';
import { InlineResponse2001 } from '../models';
import { RecoverCompleteBody } from '../models';
import { SendAccountActivationCode } from '../models';
import { UserResponse } from '../models';
/**
 * AccountApi - axios parameter creator
 * @export
 */
export const AccountApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Activate account
         * @param {string} code 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAccountActivateCode: async (code: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'code' is not null or undefined
            if (code === null || code === undefined) {
                throw new RequiredError('code','Required parameter code was null or undefined when calling getAccountActivateCode.');
            }
            const localVarPath = `/account/activate/{code}`
                .replace(`{${"code"}}`, encodeURIComponent(String(code)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Account username available
         * @param {string} username Username to check for avaibility
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAccountAvailable: async (username: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'username' is not null or undefined
            if (username === null || username === undefined) {
                throw new RequiredError('username','Required parameter username was null or undefined when calling getAccountAvailable.');
            }
            const localVarPath = `/account/available`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (username !== undefined) {
                localVarQueryParameter['username'] = username;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Resend Activation code
         * @param {string} contentType 
         * @param {SendAccountActivationCode} [body] The size of the body is limited to 1KB.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postAccountActivateResend: async (contentType: string, body?: SendAccountActivationCode, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'contentType' is not null or undefined
            if (contentType === null || contentType === undefined) {
                throw new RequiredError('contentType','Required parameter contentType was null or undefined when calling postAccountActivateResend.');
            }
            const localVarPath = `/account/activate/resend`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (contentType !== undefined && contentType !== null) {
                localVarHeaderParameter['Content-Type'] = String(contentType);
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Create Account
         * @param {string} contentType 
         * @param {CreateAccount} [body] The size of the body is limited to 4KB.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postAccountCreate: async (contentType: string, body?: CreateAccount, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'contentType' is not null or undefined
            if (contentType === null || contentType === undefined) {
                throw new RequiredError('contentType','Required parameter contentType was null or undefined when calling postAccountCreate.');
            }
            const localVarPath = `/account/create`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (contentType !== undefined && contentType !== null) {
                localVarHeaderParameter['Content-Type'] = String(contentType);
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * You can only request Account Recovery once per Hour for the same Email Address
         * @summary Recover given Account
         * @param {string} contentType 
         * @param {SendAccountActivationCode} [body] The size of the body is limited to 1KB.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postAccountRecover: async (contentType: string, body?: SendAccountActivationCode, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'contentType' is not null or undefined
            if (contentType === null || contentType === undefined) {
                throw new RequiredError('contentType','Required parameter contentType was null or undefined when calling postAccountRecover.');
            }
            const localVarPath = `/account/recover`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (contentType !== undefined && contentType !== null) {
                localVarHeaderParameter['Content-Type'] = String(contentType);
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Complete Account recover
         * @param {string} contentType 
         * @param {string} code 
         * @param {RecoverCompleteBody} [body] The size of the body is limited to 2KB.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postAccountRecoverCode: async (contentType: string, code: string, body?: RecoverCompleteBody, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'contentType' is not null or undefined
            if (contentType === null || contentType === undefined) {
                throw new RequiredError('contentType','Required parameter contentType was null or undefined when calling postAccountRecoverCode.');
            }
            // verify required parameter 'code' is not null or undefined
            if (code === null || code === undefined) {
                throw new RequiredError('code','Required parameter code was null or undefined when calling postAccountRecoverCode.');
            }
            const localVarPath = `/account/recover/{code}`
                .replace(`{${"code"}}`, encodeURIComponent(String(code)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (contentType !== undefined && contentType !== null) {
                localVarHeaderParameter['Content-Type'] = String(contentType);
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AccountApi - functional programming interface
 * @export
 */
export const AccountApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Activate account
         * @param {string} code 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAccountActivateCode(code: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<AccountActivateResponse>>> {
            const localVarAxiosArgs = await AccountApiAxiosParamCreator(configuration).getAccountActivateCode(code, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Account username available
         * @param {string} username Username to check for avaibility
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAccountAvailable(username: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<InlineResponse2001>>> {
            const localVarAxiosArgs = await AccountApiAxiosParamCreator(configuration).getAccountAvailable(username, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Resend Activation code
         * @param {string} contentType 
         * @param {SendAccountActivationCode} [body] The size of the body is limited to 1KB.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postAccountActivateResend(contentType: string, body?: SendAccountActivationCode, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<AccountActivateResponse>>> {
            const localVarAxiosArgs = await AccountApiAxiosParamCreator(configuration).postAccountActivateResend(contentType, body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Create Account
         * @param {string} contentType 
         * @param {CreateAccount} [body] The size of the body is limited to 4KB.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postAccountCreate(contentType: string, body?: CreateAccount, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<UserResponse>>> {
            const localVarAxiosArgs = await AccountApiAxiosParamCreator(configuration).postAccountCreate(contentType, body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * You can only request Account Recovery once per Hour for the same Email Address
         * @summary Recover given Account
         * @param {string} contentType 
         * @param {SendAccountActivationCode} [body] The size of the body is limited to 1KB.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postAccountRecover(contentType: string, body?: SendAccountActivationCode, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<AccountActivateResponse>>> {
            const localVarAxiosArgs = await AccountApiAxiosParamCreator(configuration).postAccountRecover(contentType, body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Complete Account recover
         * @param {string} contentType 
         * @param {string} code 
         * @param {RecoverCompleteBody} [body] The size of the body is limited to 2KB.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postAccountRecoverCode(contentType: string, code: string, body?: RecoverCompleteBody, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<AccountActivateResponse>>> {
            const localVarAxiosArgs = await AccountApiAxiosParamCreator(configuration).postAccountRecoverCode(contentType, code, body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * AccountApi - factory interface
 * @export
 */
export const AccountApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @summary Activate account
         * @param {string} code 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAccountActivateCode(code: string, options?: AxiosRequestConfig): Promise<AxiosResponse<AccountActivateResponse>> {
            return AccountApiFp(configuration).getAccountActivateCode(code, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Account username available
         * @param {string} username Username to check for avaibility
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAccountAvailable(username: string, options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse2001>> {
            return AccountApiFp(configuration).getAccountAvailable(username, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Resend Activation code
         * @param {string} contentType 
         * @param {SendAccountActivationCode} [body] The size of the body is limited to 1KB.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postAccountActivateResend(contentType: string, body?: SendAccountActivationCode, options?: AxiosRequestConfig): Promise<AxiosResponse<AccountActivateResponse>> {
            return AccountApiFp(configuration).postAccountActivateResend(contentType, body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Create Account
         * @param {string} contentType 
         * @param {CreateAccount} [body] The size of the body is limited to 4KB.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postAccountCreate(contentType: string, body?: CreateAccount, options?: AxiosRequestConfig): Promise<AxiosResponse<UserResponse>> {
            return AccountApiFp(configuration).postAccountCreate(contentType, body, options).then((request) => request(axios, basePath));
        },
        /**
         * You can only request Account Recovery once per Hour for the same Email Address
         * @summary Recover given Account
         * @param {string} contentType 
         * @param {SendAccountActivationCode} [body] The size of the body is limited to 1KB.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postAccountRecover(contentType: string, body?: SendAccountActivationCode, options?: AxiosRequestConfig): Promise<AxiosResponse<AccountActivateResponse>> {
            return AccountApiFp(configuration).postAccountRecover(contentType, body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Complete Account recover
         * @param {string} contentType 
         * @param {string} code 
         * @param {RecoverCompleteBody} [body] The size of the body is limited to 2KB.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postAccountRecoverCode(contentType: string, code: string, body?: RecoverCompleteBody, options?: AxiosRequestConfig): Promise<AxiosResponse<AccountActivateResponse>> {
            return AccountApiFp(configuration).postAccountRecoverCode(contentType, code, body, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * AccountApi - object-oriented interface
 * @export
 * @class AccountApi
 * @extends {BaseAPI}
 */
export class AccountApi extends BaseAPI {
    /**
     * 
     * @summary Activate account
     * @param {string} code 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountApi
     */
    public async getAccountActivateCode(code: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<AccountActivateResponse>> {
        return AccountApiFp(this.configuration).getAccountActivateCode(code, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary Account username available
     * @param {string} username Username to check for avaibility
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountApi
     */
    public async getAccountAvailable(username: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<InlineResponse2001>> {
        return AccountApiFp(this.configuration).getAccountAvailable(username, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary Resend Activation code
     * @param {string} contentType 
     * @param {SendAccountActivationCode} [body] The size of the body is limited to 1KB.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountApi
     */
    public async postAccountActivateResend(contentType: string, body?: SendAccountActivationCode, options?: AxiosRequestConfig) : Promise<AxiosResponse<AccountActivateResponse>> {
        return AccountApiFp(this.configuration).postAccountActivateResend(contentType, body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary Create Account
     * @param {string} contentType 
     * @param {CreateAccount} [body] The size of the body is limited to 4KB.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountApi
     */
    public async postAccountCreate(contentType: string, body?: CreateAccount, options?: AxiosRequestConfig) : Promise<AxiosResponse<UserResponse>> {
        return AccountApiFp(this.configuration).postAccountCreate(contentType, body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * You can only request Account Recovery once per Hour for the same Email Address
     * @summary Recover given Account
     * @param {string} contentType 
     * @param {SendAccountActivationCode} [body] The size of the body is limited to 1KB.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountApi
     */
    public async postAccountRecover(contentType: string, body?: SendAccountActivationCode, options?: AxiosRequestConfig) : Promise<AxiosResponse<AccountActivateResponse>> {
        return AccountApiFp(this.configuration).postAccountRecover(contentType, body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary Complete Account recover
     * @param {string} contentType 
     * @param {string} code 
     * @param {RecoverCompleteBody} [body] The size of the body is limited to 2KB.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountApi
     */
    public async postAccountRecoverCode(contentType: string, code: string, body?: RecoverCompleteBody, options?: AxiosRequestConfig) : Promise<AxiosResponse<AccountActivateResponse>> {
        return AccountApiFp(this.configuration).postAccountRecoverCode(contentType, code, body, options).then((request) => request(this.axios, this.basePath));
    }
}
