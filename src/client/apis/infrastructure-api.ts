/* tslint:disable */
/* eslint-disable */
/**
 * MangaDex API
 * MangaDex is an ad-free manga reader offering high-quality images!  This document details our API as it is right now. It is in no way a promise to never change it, although we will endeavour to publicly notify any major change.  # Acceptable use policy  Usage of our services implies acceptance of the following: - You **MUST** credit us - You **MUST** credit scanlation groups if you offer the ability to read chapters - You **CANNOT** run ads or paid services on your website and/or apps  These may change at any time for any and no reason and it is up to you check for updates from time to time.  # Security issues  If you believe you found a security issue in our API, please check our [security.txt](/security.txt) to get in touch privately. 
 *
 * OpenAPI spec version: 5.10.0
 * Contact: support@mangadex.org
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

import globalAxios, { AxiosResponse, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
/**
 * InfrastructureApi - axios parameter creator
 * @export
 */
export const InfrastructureApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Returns a plaintext response containing only the word \"pong\" if the API is healthy
         * @summary Ping healthcheck
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPing: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/ping`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * InfrastructureApi - functional programming interface
 * @export
 */
export const InfrastructureApiFp = function(configuration?: Configuration) {
    return {
        /**
         * Returns a plaintext response containing only the word \"pong\" if the API is healthy
         * @summary Ping healthcheck
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getPing(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<string>>> {
            const localVarAxiosArgs = await InfrastructureApiAxiosParamCreator(configuration).getPing(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * InfrastructureApi - factory interface
 * @export
 */
export const InfrastructureApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * Returns a plaintext response containing only the word \"pong\" if the API is healthy
         * @summary Ping healthcheck
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getPing(options?: AxiosRequestConfig): Promise<AxiosResponse<string>> {
            return InfrastructureApiFp(configuration).getPing(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * InfrastructureApi - object-oriented interface
 * @export
 * @class InfrastructureApi
 * @extends {BaseAPI}
 */
export class InfrastructureApi extends BaseAPI {
    /**
     * Returns a plaintext response containing only the word \"pong\" if the API is healthy
     * @summary Ping healthcheck
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InfrastructureApi
     */
    public async getPing(options?: AxiosRequestConfig) : Promise<AxiosResponse<string>> {
        return InfrastructureApiFp(this.configuration).getPing(options).then((request) => request(this.axios, this.basePath));
    }
}
